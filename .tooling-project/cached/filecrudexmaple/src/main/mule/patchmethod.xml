<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">
	<flow name="patchSubFlow" doc:id="af6a7e4f-3177-4356-83b5-b47dec798bc4" >
		<http:listener doc:name="Listener" doc:id="da8e3d52-074b-4892-a133-d9000e7452a2" config-ref="HTTP_Listener_config" path="/cars/{id}" allowedMethods="PATCH" />
		<set-variable value="#[attributes.uriParams.id as Number]" doc:name="id" doc:id="28920162-4ecc-4531-bfd5-8f7c68ccacdb" variableName="id" />
		<choice doc:name="First validation" doc:id="e690898d-0cc7-4900-b025-3e101f8f56d1">
			<when expression="#[payload is Object]">
				<set-variable value="#[payload as Object]" doc:name="newData" doc:id="24c4f5f2-32a3-4eca-bc7a-7a7d66934507" variableName="newData" />
				<set-variable value="#[vars.newData.id]" doc:name="newId" doc:id="95c93151-041a-4a50-a840-40c66edd9c9f" variableName="newId"/>
			</when>
			<otherwise>
				<raise-error doc:name="Raise error" doc:id="6873ee66-b466-43f3-88f5-b0509437e050" type="VALIDATION:INVALID_PAYLOAD" description="The payload has to be an object." />
			</otherwise>
		</choice>
		<file:read doc:name="Read" doc:id="fd8b6d28-2eb6-4aee-882e-2b42ee14916d" config-ref="File_Config" path="#[p('app.json_file_path')]" />
		<choice doc:name="Second validation" doc:id="f48c0f55-991a-45a2-995e-0c0f0667ba2d">
			<when expression="#[!((payload as Array).id contains vars.id)]">
				<raise-error doc:name="Raise error" doc:id="35e58c4d-a6cc-44b3-828d-1fe3f67ee6f7" type="VALIDATION:INVALID_PAYLOAD" description='ID already exists' />
			</when>
			<when expression='#[!isEmpty(keysOf(vars.newData) -- ["id", "model", "mark", "year", "price"])]'>
				<raise-error doc:name="Raise error" doc:id="e7eef426-e76a-4699-b201-2527c015c000" type="VALIDATION:INVALID_PAYLOAD" description='#["You can not use these keys for the update: [" ++ (vars.invalidKeys joinBy ", ") ++ "]"]' />
			</when>
		</choice>
		<set-payload value="#[import modules::PatchMethod
output application/json
---
PatchMethod::getUpdatedCars(payload as Array, vars.id, vars.newData)]" doc:name="Update cars" doc:id="e752ebb7-20eb-46ca-8c16-c3d6d463a539" />
		<file:write doc:name="Write" doc:id="07cb1a26-e297-4302-b862-8496a2a064fd" config-ref="File_Config" path="#[p('app.json_file_path')]" />
		<set-payload value="#[output application/json
---
if (vars.newData.id != vars.id)
	(payload as Array filter ((item) -&gt; item.id == vars.newData.id))[0]
else
	(payload as Array filter ((item) -&gt; item.id == vars.id))[0]]" doc:name="Set result" doc:id="02a23e5d-41b4-44b3-b99a-a4042bdefda3" />
	</flow>
</mule>
