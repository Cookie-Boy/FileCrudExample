<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:xml-module="http://www.mulesoft.org/schema/mule/xml-module" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/xml-module http://www.mulesoft.org/schema/mule/xml-module/current/mule-xml-module.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
	<sub-flow name="postSubFlow" doc:id="a1288399-00f1-4e05-b940-6f63b67493bc" >
		<set-variable variableName="data" value="#[output application/json
---
payload]" doc:name="data" />
		<logger level="INFO" doc:name="[INFO] Start of data type validation" doc:id="31085977-0267-4d43-be5a-11e89c2a8738" message="[POST_METHOD] Start of data type validation: #[vars.data]" />
		<choice doc:name="Data type validation" doc:id="d0a56218-ae75-45d2-bc4d-5a73186734f9" >
			<when expression="#[vars.data is Array]">
				<set-variable value="#[vars.data as Array]" doc:name="newCars" doc:id="144c49fc-1211-4902-8de3-038a04a6d8e0" variableName="newCars"/>
			</when>
			<when expression="#[vars.data is Object]">
				<set-variable value="#[[vars.data as Object]]" doc:name="newCars" doc:id="5f136b9a-8291-4446-b1cd-f188ba42ed9e" variableName="newCars"/>
			</when>
			<otherwise >
				<set-variable value="400" doc:name="httpStatus" doc:id="df8c095e-e239-4e86-bf12-c5277aba3bba" variableName="httpStatus"/>
				<raise-error doc:name="Invalid type error" doc:id="130db739-0e8a-40a4-bdb5-b55f6c91d332" type="VALIDATION:INVALID_PAYLOAD" description="The payload has to be an array or an object." />
			</otherwise>
		</choice>
		<logger level="INFO" doc:name="[INFO] End of data type validation" doc:id="1f7a5924-adfd-4b8b-9267-f33be34ce22b" message="[POST_METHOD] End of data type validation" />
		<foreach doc:name="For Each" doc:id="ac4712cf-23bc-42bc-a141-07faccfe9770" collection="#[vars.newCars]">
			<try doc:name="Try" doc:id="c0bced84-456f-47b5-ad65-3dd31e6e591c" >
				<json:validate-schema doc:name="Validate json car object" doc:id="96da9138-a223-467e-b2b3-5ba086e50cff" schema="schemas/full-schema.json">
		</json:validate-schema>
				<error-handler >
					<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="e555e4a6-7a6c-4735-b473-a62bd8e742a3" >
						<set-variable value="400" doc:name="httpStatus" doc:id="409a3b9c-7192-4f2a-b629-ad4c8257dcfd" variableName="httpStatus" />
					</on-error-propagate>
				</error-handler>
			</try>
			<logger level="INFO" doc:name="[INFO] Validate item" doc:id="458b4ce6-ebe7-4f38-ba9e-3dbb3903b126" message="The car has been validated: #[payload]" />
		</foreach>
		<file:read doc:name="Read cars" doc:id="992532cf-a6d1-46eb-9830-435ad75b3989" path="#[p('app.json_file_path')]" config-ref="File_Config"/>
		<set-variable value="#[%dw 2.0&#10;import modules::PostMethod&#10;output application/json &#10;--- &#10;PostMethod::getExistingIds(vars.newCars, payload as Array)]" doc:name="existingIds" doc:id="6229ced8-03de-46b0-8d7c-ab7f1353476c" variableName="existingIds" />
		<logger level="INFO" doc:name="[INFO] Start of ids validation" doc:id="486d5a8a-32e3-4b30-b7ff-1db61fc88969" message="[POST_METHOD] Start of ids validation: #[vars.existingIds]" />
		<choice doc:name="Ids validatation" doc:id="a5d41595-fe61-43bb-be13-0ef39f1b3ed9">
			<when expression="#[!isEmpty(vars.existingIds)]">
				<set-variable value="409" doc:name="httpStatus" doc:id="cbebedd6-44d2-4463-917d-c25a11859705" variableName="httpStatus" />
				<raise-error doc:name='Id already exists error' doc:id="65c6368d-7ffa-4653-b38b-5310ff8984c6" type="VALIDATION:ID_ALREADY_EXISTS" description='#["Items with these ids already exist: [" ++ (vars.existingIds joinBy ", ") ++ "]"]' />
			</when>
		</choice>
		<logger level="INFO" doc:name="[INFO] End of ids validataion" doc:id="4cea5649-b25f-4d2a-a19e-72441d4f4c69" message="[POST_METHOD] End of ids validation" />
		<file:write doc:name="Write new cars" doc:id="4dfecf9e-f1d4-4482-aa31-6f9b82b8c7f9" path="#[p('app.json_file_path')]" config-ref="File_Config">
			<file:content ><![CDATA[#[output application/json
---
payload as Array ++ vars.newCars]]]></file:content>
		</file:write>
		<set-payload value="#[output application/json
---
vars.newCars]" doc:name="Set result" doc:id="b68b5bf3-ea3f-4440-b76a-5cc7b29720c6" />
	</sub-flow>
	
</mule>
